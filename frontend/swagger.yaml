openapi: 3.0.3
info:
  title: Offer‑Hunt API
  version: "1.0.0"
  description: |
    API образовательной платформы подготовки к IT‑собеседованиям.
    — Единая роль **user** (ученик ↔ автор курсов)  
    — JWT Bearer‑аутентификация  
    — Версионирование курсов (инкремент поля `version` при каждом «Publish»)

servers:
  - url: https://api.offer-hunt.com/v1

tags:
  - name: Auth
    description: Регистрация и вход
  - name: Users
    description: Профиль и статистика
  - name: Courses
    description: Управление курсами и публикация
  - name: Lessons
    description: Теория, видео, тесты
  - name: Quiz
    description: Ответы и AI‑оценка
  - name: Enrollment
    description: Запись и прогресс
  - name: Ratings
    description: 5‑звёздочные оценки
  - name: Participants
    description: Автор смотрит список учеников

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  ########## ПАРАМЕТРЫ ####################################################
  parameters:
    courseId:
      name: courseId
      in: path
      required: true
      schema: { type: string, format: uuid }
      description: Уникальный ID курса
    lessonId:
      name: lessonId
      in: path
      required: true
      schema: { type: string, format: uuid }
      description: Уникальный ID урока
    version:
      name: version
      in: query
      required: false
      schema: { type: integer, minimum: 1 }
      description: Явно запрашиваемая версия курса

  ########## СХЕМЫ ########################################################
  schemas:
    ## Auth & User ······················································
    RegisterRequest:
      type: object
      required: [email, password]
      properties:
        email:    { type: string, format: email }
        password: { type: string, minLength: 8 }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:    { type: string, format: email }
        password: { type: string }

    AuthToken:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT токен Bearer
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    User:
      type: object
      properties:
        id:        { type: string, format: uuid }
        email:     { type: string, format: email }
        fullName:  { type: string, example: Ivan Petrov }
        avatarUrl: { type: string, format: uri, nullable: true }
        stats:     { $ref: '#/components/schemas/UserStats' }

    UserStats:
      type: object
      properties:
        activeCourses:    { type: integer, example: 2 }
        completedCourses: { type: integer, example: 5 }
        avgScore:         { type: number, example: 78.4 }

    ## Course & Lesson ··················································
    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required: [id, name]

    CourseBase:
      type: object
      required: [title, description, difficulty]
      properties:
        title:       { type: string, maxLength: 80 }
        description: { type: string, maxLength: 1000 }
        difficulty:  { type: string, enum: [Beginner, Middle, Senior] }
        tags:
          type: array
          items: { type: string }
        language:    { type: string, example: JavaScript }

    LessonSummary:
      type: object
      properties:
        id:       { type: string, format: uuid, nullable: true }
        title:    { type: string }
        type:     { type: string, enum: [Theory, Coding] }
        hasQuiz:  { type: boolean }

    Lesson:
      allOf:
        - $ref: '#/components/schemas/LessonSummary'
        - type: object
          required: [content]
          properties:
            content:  { type: string, description: Markdown‑текст }
            videoUrl: { type: string, format: uri, nullable: true }
            quiz:
              type: array
              items: { $ref: '#/components/schemas/Question' }

    CourseCreateRequest:
      allOf:
        - $ref: '#/components/schemas/CourseBase'
        - type: object
          properties:
            lessons:
              type: array
              items: { $ref: '#/components/schemas/Lesson' }
              description: Массив уроков для создания вместе с курсом

    CourseUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/CourseBase'
        - type: object
          properties:
            lessons:
              type: array
              items: { $ref: '#/components/schemas/Lesson' }
              description: Обновленный массив уроков курса

    Course:
      allOf:
        - $ref: '#/components/schemas/CourseBase'
        - type: object
          properties:
            id:          { type: string, format: uuid }
            authorId:    { type: string, format: uuid }
            version:     { type: integer, example: 3 }
            isPublished: { type: boolean }
            stats:       { $ref: '#/components/schemas/CourseStats' }
            lessons:
              type: array
              items: { $ref: '#/components/schemas/LessonSummary' }
              description: Массив уроков курса

    CourseStats:
      type: object
      properties:
        enrollments:   { type: integer, example: 120 }
        avgCompletion: { type: number, example: 64.5 }
        avgScore:      { type: number, example: 75.2 }

    ## Quiz ······························································
    Question:
      type: object
      required: [id, text, type]
      properties:
        id:   { type: string, format: uuid }
        text: { type: string }
        type: { type: string, enum: [choice, shortText, longText] }
        options:
          type: array
          description: Только для `choice`
          items:
            type: object
            properties:
              id:    { type: string }
              label: { type: string }

    AnswerSubmission:
      type: object
      required: [questionId, answer]
      properties:
        questionId: { type: string, format: uuid }
        answer:
          oneOf:
            - type: string
            - type: array
              items: { type: string }

    AnswerResult:
      type: object
      properties:
        questionId: { type: string, format: uuid }
        score:      { type: number, minimum: 0, maximum: 100 }
        feedback:
          type: array
          items: { type: string }

    QuizEvaluation:
      type: object
      properties:
        totalScore: { type: number, minimum: 0, maximum: 100 }
        answers:
          type: array
          items: { $ref: '#/components/schemas/AnswerResult' }

    ## Enrollment & Rating ··············································
    Enrollment:
      type: object
      properties:
        courseId:   { type: string, format: uuid }
        status:     { type: string, enum: [inProgress, completed] }
        progress:   { type: number, minimum: 0, maximum: 100 }
        startedAt:  { type: string, format: date-time }
        finishedAt: { type: string, format: date-time, nullable: true }

    RatingRequest:
      type: object
      required: [value]
      properties:
        value: { type: integer, minimum: 1, maximum: 5, example: 5 }

    RatingResponse:
      type: object
      properties:
        courseId:  { type: string, format: uuid }
        userId:    { type: string, format: uuid }
        value:     { type: integer, example: 5 }
        createdAt: { type: string, format: date-time }

    ## Errors ····························································
    Error:
      type: object
      properties:
        code:    { type: string }
        message: { type: string }

  ########## ПОВТОРНО‑ИСПОЛЬЗУЕМЫЕ ОТВЕТЫ ###############################
  responses:
    Unauthorized:
      description: Требуется авторизация
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    Forbidden:
      description: Недостаточно прав
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    NotFound:
      description: Не найдено
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

#######################################################################
#                                PATHS                               #
#######################################################################

security:
  - bearerAuth: []

paths:

  ########## AUTH ######################################################
  /auth/register:
    post:
      tags: [Auth]
      summary: Регистрация
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
      responses:
        "201":
          description: Аккаунт создан
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "409":
          description: Email уже зарегистрирован
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /auth/login:
    post:
      tags: [Auth]
      summary: Получить JWT‑токен
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        "200":
          description: Успешный вход
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthToken' }
        "401":
          description: Неверные учётные данные
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  ########## USERS #####################################################
  /users/me:
    get:
      tags: [Users]
      summary: Мой профиль (только чтение)
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: Информация о пользователе
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "401":
          $ref: '#/components/responses/Unauthorized'

  ########## COURSES ###################################################
  /courses:
    get:
      tags: [Courses]
      summary: Каталог курсов
      parameters:
        - name: search
          in: query
          schema: { type: string }
        - name: tags
          in: query
          explode: false
          style: form
          schema:
            type: array
            items: { type: string }
        - name: difficulty
          in: query
          schema: { type: string, enum: [Beginner, Middle, Senior] }
        - name: sort
          in: query
          schema: { type: string, enum: [popularity, difficulty, duration] }
      responses:
        "200":
          description: Список курсов
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Course' }

    post:
      tags: [Courses]
      summary: Создать курс с уроками (черновик version 1)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CourseCreateRequest' }
      responses:
        "201":
          description: Курс создан
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Course' }

  /courses/{courseId}:
    parameters:
      - $ref: '#/components/parameters/courseId'
      - $ref: '#/components/parameters/version'
    get:
      tags: [Courses]
      summary: Получить курс (конкретная или последняя версия)
      responses:
        "200":
          description: Информация о курсе
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Course' }
        "404":
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Courses]
      summary: Обновить черновик курса c уроками
      description: |
        Только автор и только пока `isPublished=false`.
        После первой публикации изменения создают новый черновик.
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CourseUpdateRequest' }
      responses:
        "200":
          description: Черновик обновлён
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Course' }
        "403":
          $ref: '#/components/responses/Forbidden'

  /courses/{courseId}/publish:
    post:
      tags: [Courses]
      summary: Опубликовать курс → version+1
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        "200":
          description: Курс опубликован
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Course' }
        "403":
          $ref: '#/components/responses/Forbidden'

  ########## LESSONS ####################################################
  /courses/{courseId}/lessons:
    parameters:
      - $ref: '#/components/parameters/courseId'
    get:
      tags: [Lessons]
      summary: Список уроков курса
      responses:
        "200":
          description: Список уроков
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/LessonSummary' }

    post:
      tags: [Lessons]
      summary: Добавить урок в черновик
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Lesson' }
      responses:
        "201":
          description: Урок создан
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Lesson' }

  /courses/{courseId}/lessons/{lessonId}:
    parameters:
      - $ref: '#/components/parameters/courseId'
      - $ref: '#/components/parameters/lessonId'
    get:
      tags: [Lessons]
      summary: Получить урок
      responses:
        "200":
          description: Информация об уроке
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Lesson' }
        "404":
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Lessons]
      summary: Обновить урок (пока курс — черновик)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Lesson' }
      responses:
        "200":
          description: Урок обновлён
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Lesson' }
        "403":
          $ref: '#/components/responses/Forbidden'

  ########## QUIZ #######################################################
  /courses/{courseId}/lessons/{lessonId}/quiz:
    get:
      tags: [Quiz]
      summary: Получить вопросы урока
      parameters:
        - $ref: '#/components/parameters/courseId'
        - $ref: '#/components/parameters/lessonId'
      responses:
        "200":
          description: Список вопросов
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Question' }
        "404":
          $ref: '#/components/responses/NotFound'

  /courses/{courseId}/lessons/{lessonId}/quiz/answers:
    post:
      tags: [Quiz]
      summary: Отправить ответы → AI‑оценка
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/courseId'
        - $ref: '#/components/parameters/lessonId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: '#/components/schemas/AnswerSubmission' }
      responses:
        "200":
          description: Результат проверки
          content:
            application/json:
              schema: { $ref: '#/components/schemas/QuizEvaluation' }

  ########## ENROLLMENT ##################################################
  /courses/{courseId}/enroll:
    post:
      tags: [Enrollment]
      summary: Записаться на курс
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        "201":
          description: Запись создана
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Enrollment' }
        "409":
          description: Уже записан
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /courses/{courseId}/progress:
    get:
      tags: [Enrollment]
      summary: Текущий прогресс
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        "200":
          description: Данные прогресса
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Enrollment' }

  ########## RATINGS #####################################################
  /courses/{courseId}/rating:
    post:
      tags: [Ratings]
      summary: Поставить оценку 1‑5
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/courseId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RatingRequest' }
      responses:
        "201":
          description: Оценка сохранена
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RatingResponse' }
        "409":
          description: Уже оценил
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  ########## PARTICIPANTS (Только автор) ################################
  /courses/{courseId}/participants:
    get:
      tags: [Participants]
      summary: Список участников (видит автор)
      security: [ { bearerAuth: [] } ]
      parameters:
        - $ref: '#/components/parameters/courseId'
      responses:
        "200":
          description: Профили + прогресс
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/User'
                    - type: object
                      properties:
                        progress: { type: number, minimum: 0, maximum: 100 }
        "403":
          $ref: '#/components/responses/Forbidden'
